package com.sc.android.chestwork.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOSE_BEAN".
*/
public class CloseBeanDao extends AbstractDao<CloseBean, String> {

    public static final String TABLENAME = "CLOSE_BEAN";

    /**
     * Properties of entity CloseBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Kind = new Property(1, String.class, "kind", false, "KIND");
        public final static Property Num = new Property(2, String.class, "num", false, "NUM");
        public final static Property Season = new Property(3, String.class, "season", false, "SEASON");
        public final static Property IamgePath = new Property(4, String.class, "iamgePath", false, "IAMGE_PATH");
    }


    public CloseBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CloseBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOSE_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"KIND\" TEXT," + // 1: kind
                "\"NUM\" TEXT," + // 2: num
                "\"SEASON\" TEXT," + // 3: season
                "\"IAMGE_PATH\" TEXT);"); // 4: iamgePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOSE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CloseBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(2, kind);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(3, num);
        }
 
        String season = entity.getSeason();
        if (season != null) {
            stmt.bindString(4, season);
        }
 
        String iamgePath = entity.getIamgePath();
        if (iamgePath != null) {
            stmt.bindString(5, iamgePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CloseBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(2, kind);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(3, num);
        }
 
        String season = entity.getSeason();
        if (season != null) {
            stmt.bindString(4, season);
        }
 
        String iamgePath = entity.getIamgePath();
        if (iamgePath != null) {
            stmt.bindString(5, iamgePath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CloseBean readEntity(Cursor cursor, int offset) {
        CloseBean entity = new CloseBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kind
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // season
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // iamgePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CloseBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setKind(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSeason(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIamgePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CloseBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CloseBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CloseBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
